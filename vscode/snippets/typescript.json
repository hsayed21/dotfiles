{
  "form control for builder ": {
    "prefix": "fg-control",
    "body": [
      "${1:name}: this.fb.control(null, [Validators.required])",
      "get ${1:name}Ctr() {",
      "  return this.${2:FormGroupName}.get('${1:name}') as FormControl;",
      "}"
    ]
  },
  "test": {
    "prefix": "test",
    "body": [
      "// ----------------------------------------------------------------",
      "// For Feedback Question Component",
      "",
      "",
      "${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}",
      "",
      "",
      "\"@Component({\",",
      "\t\"  selector: 'app-${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}',\",",
      "\t\"  templateUrl: './${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}.component.html',\",",
      "\t\"  styleUrls: ['./${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}.component.scss']\",",
      "\t\"})\",",
      "\t\"export class ${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/${1:/pascalcase}/}Component {\",",
      "\t\"  // Add your class logic here\",",
      "\t\"}\"",
      "",
      ""
    ]
  },
  "dex-express-with-modal-list": {
    "prefix": "dev-express-with-modal-list\r",
    "body": [
      "\r",
      "\r",
      "\r",
      "import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r",
      "import { Component, OnInit, ViewChild } from \"@angular/core\";\r",
      "import { LanguageService } from 'src/app/shared/services/language.service';\r",
      "import { DataGridColumn } from \"src/app/shared/general-dtos/data-grid-column\";\r",
      "import { UpdateEntityStatusDTO } from \"src/app/shared/sys-dtos/Generic/update-entity-status-dto\";\r",
      "import { FeedbackQuestionDTO } from '../../../../shared/sys-dtos/PointOfSale/FeedbackQuestions/feedback-question-dto';\r",
      "import { FeedbackQuestionService } from '../../services/feedback-question.service';\r",
      "import { QuestionType } from 'src/app/shared/sys-dtos/PointOfSale/FeedbackQuestions/add-feedback-question-dto';\r",
      "import { ${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/${1:/pascalcase}/}FormComponent } from '../feedback-questions-form/feedback-question-form.component';\r",
      "\r",
      "@Component({\r",
      "  selector: 'app-${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}',\r",
      "  templateUrl: './${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}.component.html',\r",
      "  styleUrls: ['./${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/$1/}.component.scss']\r",
      "})\r",
      "\r",
      "export class ${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/${1:/pascalcase}/}Component implements OnInit {\r",
      "\r",
      "  AllData: FeedbackQuestionDTO[] = [];\r",
      "  Errors: any = { isSuccess: true };\r",
      "  IsLoading: boolean = false;\r",
      "\r",
      "  TableColumns: DataGridColumn[] = [\r",
      "    // Common\r",
      "    { name: 'primaryQuestion', translate: \"PointOfSale.FeedbackQuestions.QuestionPrimaryLanguage\", dataType: 'string', allowHiding: false, },\r",
      "    { name: 'secondaryQuestion', translate: \"PointOfSale.FeedbackQuestions.QuestionSecondaryLanguage\", dataType: 'string' },\r",
      "    { name: 'questionTypeStr', translate: \"PointOfSale.FeedbackQuestions.QuestionType\", dataType: 'string'},\r",
      "  ];\r",
      "\r",
      "  constructor(\r",
      "    public modalService: NgbModal,\r",
      "    private languageService: LanguageService,\r",
      "    private feedbackQuestionService: FeedbackQuestionService,\r",
      "  ) { }\r",
      "\r",
      "  ngOnInit(): void {\r",
      "    this.get${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/${1:/pascalcase}/}();\r",
      "  }\r",
      "\r",
      "  //#region ngOnInit Functions\r",
      "  get${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/${1:/pascalcase}/}() {\r",
      "    this.IsLoading = true;\r",
      "    this.feedbackQuestionService.getListOfFeedbackQuestionsOfCompany().subscribe({\r",
      "      next: data => {\r",
      "        this.AllData = this.transfareData(data);\r",
      "      },\r",
      "      error: err => {\r",
      "        this.IsLoading = false;\r",
      "        this.Errors = err;\r",
      "      },\r",
      "      complete: () => {\r",
      "        this.IsLoading = false;\r",
      "      }\r",
      "    });\r",
      "  }\r",
      "\r",
      "  private transfareData(data: FeedbackQuestionDTO[]) {\r",
      "    return data.map(entry => {\r",
      "      return {\r",
      "        ...entry,\r",
      "        questionTypeStr: this.languageService.translations.SystemEnums.QuestionType[QuestionType[entry.questionType]],\r",
      "        badgeValues: entry.getAcceptedAnswers.sort((a, b) => a.localeCompare(b)).map(e => e)!,\r",
      "      }\r",
      "    });\r",
      "  }\r",
      "\r",
      "  //#endregion\r",
      "\r",
      "  openModal(feedbackQuestion?: FeedbackQuestionDTO) {\r",
      "    const modalRef = this.modalService.open(FeedbackQuestionFormComponent, { size: 'lg' });\r",
      "    modalRef.componentInstance.feedbackQuestion = feedbackQuestion;\r",
      "    modalRef.componentInstance.onAfterSaving.subscribe(() => {\r",
      "      this.getFeedbackQuestions();\r",
      "    });\r",
      "  }\r",
      "\r",
      "  updateStatus(event: any) {\r",
      "    this.feedbackQuestionService.updateFeedbackQuestionStatusInCompany({ id: event.id, active: !event.active } as UpdateEntityStatusDTO).subscribe({\r",
      "      error: err => {\r",
      "        this.Errors = err;\r",
      "      },\r",
      "      complete: () => {\r",
      "        this.get${TM_DIRECTORY/^.+[\\\\/\\\\\\\\]+(.*)$/${1:/pascalcase}/}();\r",
      "      }\r",
      "    });\r",
      "  }\r",
      "}\r",
      ""
    ]
  },
  "dev-express-with-modal-form": {
    "prefix": "dev-express-with-modal-form\r",
    "body": [
      "\r",
      "import Swal from \"sweetalert2\";\r",
      "import { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\r",
      "import { Helper } from \"src/app/shared/helpers/utilities\";\r",
      "import { ErrorService } from \"src/app/shared/services/error.service\";\r",
      "import { LanguageService } from \"src/app/shared/services/language.service\";\r",
      "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r",
      "import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r",
      "import { FeedbackQuestionService } from \"../../services/feedback-question.service\";\r",
      "import { UpdateFeedbackQuestionDTO } from \"src/app/shared/sys-dtos/PointOfSale/FeedbackQuestions/update-feedback-question-dto\";\r",
      "import { FeedbackQuestionDTO } from \"src/app/shared/sys-dtos/PointOfSale/FeedbackQuestions/feedback-question-dto\";\r",
      "import { AddFeedbackQuestionDTO, QuestionType } from \"src/app/shared/sys-dtos/PointOfSale/FeedbackQuestions/add-feedback-question-dto\";\r",
      "\r",
      "@Component({\r",
      "  selector: 'app-feedback-question-form',\r",
      "  templateUrl: './feedback-question-form.component.html',\r",
      "  styleUrls: ['./feedback-question-form.component.scss']\r",
      "})\r",
      "\r",
      "export class FeedbackQuestionFormComponent implements OnInit {\r",
      "\r",
      "  @Input() feedbackQuestion?: FeedbackQuestionDTO;\r",
      "  @Output() onAfterSaving = new EventEmitter();\r",
      "  FeedbackQuestionForm!: FormGroup;\r",
      "  FeedbackQuestionFormLoading = false;\r",
      "  QuestionType: typeof QuestionType = QuestionType;\r",
      "\r",
      "  constructor(\r",
      "    private fb: FormBuilder,\r",
      "    public modalService: NgbModal,\r",
      "    private errorService: ErrorService,\r",
      "    private languageService: LanguageService,\r",
      "    private feedbackQuestionService: FeedbackQuestionService\r",
      "  ) { }\r",
      "\r",
      "  ngOnInit(): void {\r",
      "    console.log(this.feedbackQuestion);\r",
      "    this.feedbackQuestionFormCreation();\r",
      "    if (!Helper.isNull(this.feedbackQuestion)) this.getDataForEdit();\r",
      "  }\r",
      "\r",
      "  //#region ngOnInit Functions\r",
      "  feedbackQuestionFormCreation() {\r",
      "    this.FeedbackQuestionForm = this.fb.group({\r",
      "      primaryQuestion: this.fb.control(null, [Validators.required, Validators.maxLength(500)]),\r",
      "      secondaryQuestion: this.fb.control(null, [Validators.maxLength(500)]),\r",
      "      questionType: this.fb.control(null, [Validators.required]),\r",
      "    });\r",
      "  }\r",
      "\r",
      "  getDataForEdit() {\r",
      "    // this.feedbackQuestionService.getFeedbackQuestionById(this.TempFeedbackQuestionToEditId).subscribe({\r",
      "    //   next: data => { this.FeedbackQuestionForm.patchValue(data); },\r",
      "    //   error: err => {\r",
      "    //     this.errorService.setError(err, this.FeedbackQuestionForm, Helper.nameOfClass(FeedbackQuestionDTO), Helper.nameOfComponent(FeedbackQuestionFormComponent));\r",
      "    //   }\r",
      "    // });\r",
      "    this.FeedbackQuestionForm.patchValue(this.feedbackQuestion!);\r",
      "  }\r",
      "  //#endregion\r",
      "\r",
      "  saveFeedbackQuestion(formInformation: UpdateFeedbackQuestionDTO) {\r",
      "    this.FeedbackQuestionFormLoading = true;\r",
      "    if (!Helper.isNull(this.feedbackQuestion)) {\r",
      "      formInformation.id = this.feedbackQuestion!.id;\r",
      "      this.feedbackQuestionService.updateFeedbackQuestionInCompany(formInformation).subscribe({\r",
      "        error: err => {\r",
      "          this.FeedbackQuestionFormLoading = false;\r",
      "          this.errorService.setError(err, this.FeedbackQuestionForm, Helper.nameOfClass(UpdateFeedbackQuestionDTO), Helper.nameOfComponent(FeedbackQuestionFormComponent));\r",
      "        },\r",
      "        complete: () => {\r",
      "          this.FeedbackQuestionFormLoading = false;\r",
      "          this.onAfterSaving.emit();\r",
      "          this.modalService.dismissAll();\r",
      "          Swal.fire(\r",
      "            this.languageService.translations.Common.Successfully,\r",
      "            this.languageService.translations.PointOfSale.FeedbackQuestions.FeedbackQuestionsUpdatedSuccess,\r",
      "            'success'\r",
      "          );\r",
      "        }\r",
      "      });\r",
      "    } else {\r",
      "      this.feedbackQuestionService.addNewFeedbackQuestionInCompany(formInformation as AddFeedbackQuestionDTO).subscribe({\r",
      "        error: err => {\r",
      "          this.FeedbackQuestionFormLoading = false;\r",
      "          this.errorService.setError(err, this.FeedbackQuestionForm, Helper.nameOfClass(AddFeedbackQuestionDTO), Helper.nameOfComponent(FeedbackQuestionFormComponent));\r",
      "        },\r",
      "        complete: () => {\r",
      "          this.FeedbackQuestionFormLoading = false;\r",
      "          this.onAfterSaving.emit();\r",
      "          this.modalService.dismissAll();\r",
      "          Swal.fire(\r",
      "            this.languageService.translations.Common.Successfully,\r",
      "            this.languageService.translations.PointOfSale.FeedbackQuestions.FeedbackQuestionsAddedSuccess,\r",
      "            'success'\r",
      "          );\r",
      "        }\r",
      "      });\r",
      "    }\r",
      "  }\r",
      "\r",
      "  //#region Dine In Floor Form Controls\r",
      "  get questionPrimaryLanguageCtr() {\r",
      "    return this.FeedbackQuestionForm.get('primaryQuestion') as FormControl;\r",
      "  }\r",
      "\r",
      "  get questionSecondaryLanguageCtr() {\r",
      "    return this.FeedbackQuestionForm.get('secondaryQuestion') as FormControl;\r",
      "  }\r",
      "\r",
      "  get questionTypeCtr() {\r",
      "    return this.FeedbackQuestionForm.get('questionType') as FormControl;\r",
      "  }\r",
      "\r",
      "  get formHasErrors() {\r",
      "    return this.FeedbackQuestionForm;\r",
      "  }\r",
      "  //#endregion\r",
      "\r",
      "}\r",
      "\r",
      ""
    ]
  }
}